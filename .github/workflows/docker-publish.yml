name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '26 22 * * *'
  push:
    branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_PREFIX: 'analogj/bedrock-'

jobs:
  builder:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - runtime: 'java'
            version: '11'
            packages: 'nixpkgs.adoptopenjdk-jre-bin'

          - runtime: 'node'
            version: '14'
            packages: 'nixpkgs.nodejs-14_x'

          - runtime: 'python'
            version: '2'
            packages: 'nixpkgs.python2Full'
          - runtime: 'python'
            version: '3'
            packages: 'nixpkgs.python3Full'

          - runtime: 'ruby'
            version: '3'
            packages: 'nixpkgs.ruby_3_0'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          load: true
          context: .
          file: ${{ matrix.runtime }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.runtime }}:${{ matrix.version }}
          build-args: |
            packages=${{ matrix.packages }}

#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.runtime }}:${{ matrix.version }}'
#          format: 'table'
#          exit-code: '1'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          severity: 'CRITICAL,HIGH'

#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v1
#        with:
#          sarif_file: 'trivy-results.sarif'
